# -*- coding: utf-8 -*-
"""Diabetes_Prediction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1uOhOS62LSpyFADIavGlfoxgcmHjRGVCt

Importing the Dependencies
"""

import numpy as np
import pandas as pd
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import  train_test_split
from sklearn import svm
from sklearn.metrics import accuracy_score

"""Data Collection and Data Analysis"""

#loading diabetes dataset to the pandas dataframe
df = pd.read_csv('/content/diabetes.csv')

df.head()

df.shape

#getting the statistical measures of the data
df.describe()

df['Outcome'].value_counts()

"""0 --> Non-Diabetic
1 --> Diabetic
"""

df.groupby('Outcome').mean()

#Separate the data and the labels
X = df.drop(columns = 'Outcome',axis = 1)
Y = df['Outcome']

print(X)

print(Y)

"""#Data Standardization"""

scaler = StandardScaler()

scaler.fit(X)

standardized_data = scaler.transform(X)

print(standardized_data)

X = standardized_data
Y = df['Outcome']

print(Y)

"""#Train Test Split"""

X_train,X_test,Y_train,Y_test = train_test_split(X,Y,test_size=0.2,stratify=Y,random_state=2)

print(X.shape,X_train.shape,X_test.shape)

"""#Training the Model"""

classifier = svm.SVC(kernel='linear')

#training the support vector machine
classifier.fit(X_train,Y_train)

"""#Model Evaluation

Accuracy Score
"""

#accuracy score on the training data
X_train_prediction = classifier.predict(X_train)
training_data_accuracy = accuracy_score(X_train_prediction,Y_train)

print(training_data_accuracy)

#accuracy score on the test data
X_test_prediction = classifier.predict(X_test)
test_data_accuracy = accuracy_score(X_test_prediction,Y_test)

print(test_data_accuracy)

"""#Making the Predictive System"""

input_data = (3,126,88,41,235,39.3,0.704,27)
#changing the input data to numpy array
input_as_numpy_array = np.asarray(input_data)
#reshape the array as we are predicting for one instance
input_data_reshaped = input_as_numpy_array.reshape(1,-1)
#standardize the data
std_data = scaler.transform(input_data_reshaped)
print(std_data)

prediction = classifier.predict(std_data)
print(prediction[0])
if prediction[0] == 1:
  print("The person is diabetic")
else :
  print("The person is not diabetic")